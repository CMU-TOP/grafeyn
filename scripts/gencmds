#!/usr/bin/python3

import argparse, json, os, sys, multiprocessing, socket
NCPU = multiprocessing.cpu_count()

home = os.path.expanduser('~')

parser = argparse.ArgumentParser()
parser.add_argument(
  '-t',
  '--threads',
  default = str(NCPU),
  dest = 'threads',
  help = 'comma-separated (no spaces) list of number of threads to use (defaults to max CPU threads on this machine)')
parser.add_argument(
  '-d', 
  '--bench-dir', 
  default = os.path.join(home, 'proj', 'quantum-benchmarks'), 
  dest = 'bench_dir',
  help = 'path to checked-out CMU-TOP/quantum-benchmarks.git')
parser.add_argument(
  '-b', 
  '--bare',
  action = 'store_true',
  dest = 'bare',
  help = 'generate commands only')
parser.add_argument(
  '-m',
  '--machine-name',
  default = socket.gethostname(),
  dest = 'machine_name',
  help = "name of machine to label output rows with (defaults to current machine's hostname)")
args = parser.parse_args()

try:
  threadList = list(map(int, args.threads.split(',')))
except Exception as e:
  sys.exit(f'{e}\nERROR: could not parse argument: -t {args.threads}')

inputFiles = \
  [ 'bv_n30.qasm'
  , 'ising_n26.qasm'
  , 'knn_n31.qasm'
  , 'adder_n28.qasm'
  , 'qft_n29.qasm'
  , 'multiplier_n45.qasm'
  , 'qram_n20.qasm'
  , 'qugan_n39_transpiled.qasm'
  , 'wstate_n36.qasm'
  , 'dj_indep_qiskit_62.qasm'
  , 'dj_indep_qiskit_30.qasm'
  , 'knn_n41.qasm'
  , 'qv_n32.qasm'
  , 'cat_n35.qasm'
  , 'vqe_uccsd_n28_transpiled.qasm'
  , 'dnn_n33_transpiled.qasm'
  , 'swap_test_n41.qasm'
  , 'ghz_n40.qasm'
  , 'ising_n34.qasm'
  , 'bv_n70.qasm'
  , 'bv_n280.qasm'
  , 'adder_n433.qasm'
  , 'cat_n260.qasm'
  , 'ghz_n255.qasm'
  , 'multiplier_n400.qasm'
  , 'dj_indep_qiskit_130.qasm'
  ]

def absolute_input_path(inputFile):
  return os.path.join(args.bench_dir, 'qasm-src', inputFile)

def mplsim_cmd(inputFile, threads, scheduler):
  mplRuntimeArgs = f'procs {threads} set-affinity megablock-threshold 14 cc-threshold-ratio 1.1 collection-threshold-ratio 2.0 max-cc-depth 1'
  simulatorArgs = f'-scheduler {scheduler} -input {absolute_input_path(inputFile)}'
  prefix = '/usr/bin/time -f "maxrss %M kb"'
  return f'{prefix} ./main.mpl @mpl {mplRuntimeArgs} -- {simulatorArgs}'

def mplsim(inputFile, threads, scheduler):
  return {
    'cmd': mplsim_cmd(inputFile, threads, scheduler),
    'cwd': 'feynsum-sml',
    'simulator': 'feynsum-sml',
    'simulator_options': {
      'scheduler': scheduler
    },
    'threads': threads,
    'input': inputFile,
    'machine': args.machine_name
  }

def qiskitsim_cmd(inputFile, threads):
  return f'python main.py {absolute_input_path(inputFile)} --threads {threads}'

def qiskitsim(inputFile, threads):
  return {
    'cmd': qiskitsim_cmd(inputFile, threads),
    'cwd': 'qiskit-sim',
    'simulator': 'qiskit',
    'simulator_options': None,
    'threads': threads,
    'input': inputFile,
    'machine': args.machine_name
  }

rows = \
  [mplsim(f, t, s) for f in inputFiles for t in threadList for s in ['gfq']] \
  + [qiskitsim(f, t) for f in inputFiles for t in threadList]

for r in rows:
  if args.bare:
    print(r['cmd'])
  else:
    print(json.dumps(r))